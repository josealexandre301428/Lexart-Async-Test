{"ast":null,"code":"// src/create-pool.ts\nimport { Pool, neon } from \"@neondatabase/serverless\";\n\n// src/error.ts\nvar VercelPostgresError = class extends Error {\n  constructor(code, message) {\n    super(`VercelPostgresError - '${code}': ${message}`);\n    this.code = code;\n    this.name = \"VercelPostgresError\";\n  }\n};\n\n// src/postgres-connection-string.ts\nfunction postgresConnectionString(type = \"pool\") {\n  let connectionString;\n  switch (type) {\n    case \"pool\":\n      {\n        connectionString = process.env.POSTGRES_URL;\n        break;\n      }\n    case \"direct\":\n      {\n        connectionString = process.env.POSTGRES_URL_NON_POOLING;\n        break;\n      }\n    default:\n      {\n        const _exhaustiveCheck = type;\n        const str = _exhaustiveCheck;\n        throw new VercelPostgresError(\"invalid_connection_type\", `Unhandled type: ${str}`);\n      }\n  }\n  if (connectionString === \"undefined\") connectionString = void 0;\n  return connectionString;\n}\nfunction isPooledConnectionString(connectionString) {\n  return connectionString.includes(\"-pooler.\");\n}\nfunction isDirectConnectionString(connectionString) {\n  return !isPooledConnectionString(connectionString);\n}\nfunction isLocalhostConnectionString(connectionString) {\n  try {\n    const withHttpsProtocol = connectionString.replace(/^postgresql:\\/\\//, \"https://\");\n    return new URL(withHttpsProtocol).hostname === \"localhost\";\n  } catch (err) {\n    if (err instanceof TypeError) {\n      return false;\n    }\n    if (typeof err === \"object\" && err !== null && \"message\" in err && typeof err.message === \"string\" && err.message === \"Invalid URL\") {\n      return false;\n    }\n    throw err;\n  }\n}\n\n// src/sql-template.ts\nfunction sqlTemplate(strings, ...values) {\n  var _a, _b;\n  if (!isTemplateStringsArray(strings) || !Array.isArray(values)) {\n    throw new VercelPostgresError(\"incorrect_tagged_template_call\", \"It looks like you tried to call `sql` as a function. Make sure to use it as a tagged template.\\n\tExample: sql`SELECT * FROM users`, not sql('SELECT * FROM users')\");\n  }\n  let result = (_a = strings[0]) != null ? _a : \"\";\n  for (let i = 1; i < strings.length; i++) {\n    result += `$${i}${(_b = strings[i]) != null ? _b : \"\"}`;\n  }\n  return [result, values];\n}\nfunction isTemplateStringsArray(strings) {\n  return Array.isArray(strings) && \"raw\" in strings && Array.isArray(strings.raw);\n}\n\n// src/create-client.ts\nimport { Client } from \"@neondatabase/serverless\";\nvar VercelClient = class extends Client {\n  /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createClient();\n   * const userId = 123;\n   * await client.connect();\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * await client.end();\n   * ```\n   * @returns A promise that resolves to the query result.\n   */\n  async sql(strings, ...values) {\n    const [query, params] = sqlTemplate(strings, ...values);\n    return this.query(query, params);\n  }\n};\nfunction createClient(config) {\n  var _a;\n  const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"direct\");\n  if (!connectionString) throw new VercelPostgresError(\"missing_connection_string\", \"You did not supply a 'connectionString' and no 'POSTGRES_URL_NON_POOLING' env var was found.\");\n  if (!isLocalhostConnectionString(connectionString) && !isDirectConnectionString(connectionString)) throw new VercelPostgresError(\"invalid_connection_string\", \"This connection string is meant to be used with a pooled connection. Try `createPool()` instead.\");\n  return new VercelClient({\n    ...config,\n    connectionString\n  });\n}\n\n// src/create-pool.ts\nvar VercelPool = class extends Pool {\n  constructor(config) {\n    var _a;\n    super(config);\n    this.Client = VercelClient;\n    this.connectionString = (_a = config.connectionString) != null ? _a : \"\";\n  }\n  /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createPool();\n   * const userId = 123;\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * ```\n   * @returns A promise that resolves to the query result.\n   */\n  async sql(strings, ...values) {\n    const [query, params] = sqlTemplate(strings, ...values);\n    const sql2 = neon(this.connectionString, {\n      fullResults: true\n    });\n    return sql2(query, params);\n  }\n  connect(callback) {\n    return super.connect(callback);\n  }\n};\nfunction createPool(config) {\n  var _a;\n  const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"pool\");\n  if (!connectionString) throw new VercelPostgresError(\"missing_connection_string\", \"You did not supply a 'connectionString' and no 'POSTGRES_URL' env var was found.\");\n  if (!isLocalhostConnectionString(connectionString) && !isPooledConnectionString(connectionString)) throw new VercelPostgresError(\"invalid_connection_string\", \"This connection string is meant to be used with a direct connection. Make sure to use a pooled connection string or try `createClient()` instead.\");\n  let maxUses = config == null ? void 0 : config.maxUses;\n  let max = config == null ? void 0 : config.max;\n  if (typeof EdgeRuntime !== \"undefined\") {\n    if (maxUses && maxUses !== 1) {\n      console.warn(\"@vercel/postgres: Overriding `maxUses` to 1 because the EdgeRuntime does not support client reuse.\");\n    }\n    if (max && max !== 1e4) {\n      console.warn(\"@vercel/postgres: Overriding `max` to 10,000 because the EdgeRuntime does not support client reuse.\");\n    }\n    maxUses = 1;\n    max = 1e4;\n  }\n  const pool2 = new VercelPool({\n    ...config,\n    connectionString,\n    maxUses,\n    max\n  });\n  return pool2;\n}\n\n// src/index.ts\nvar pool;\nvar sql = new Proxy(\n// eslint-disable-next-line @typescript-eslint/no-empty-function -- [@vercel/style-guide@5 migration]\n() => {}, {\n  get(_, prop) {\n    if (!pool) {\n      pool = createPool();\n    }\n    const val = Reflect.get(pool, prop);\n    if (typeof val === \"function\") {\n      return val.bind(pool);\n    }\n    return val;\n  },\n  apply(_, __, argumentsList) {\n    if (!pool) {\n      pool = createPool();\n    }\n    return pool.sql(...argumentsList);\n  }\n});\nvar db = sql;\nexport { postgresConnectionString, VercelClient, createClient, VercelPool, createPool, sql, db };","map":{"version":3,"names":["Pool","neon","VercelPostgresError","Error","constructor","code","message","name","postgresConnectionString","type","connectionString","process","env","POSTGRES_URL","POSTGRES_URL_NON_POOLING","_exhaustiveCheck","str","isPooledConnectionString","includes","isDirectConnectionString","isLocalhostConnectionString","withHttpsProtocol","replace","URL","hostname","err","TypeError","sqlTemplate","strings","values","_a","_b","isTemplateStringsArray","Array","isArray","result","i","length","raw","Client","VercelClient","sql","query","params","createClient","config","VercelPool","sql2","fullResults","connect","callback","createPool","maxUses","max","EdgeRuntime","console","warn","pool2","pool","Proxy","get","_","prop","val","Reflect","bind","apply","__","argumentsList","db"],"sources":["/home/jose/Documentos/testesTecnicos/lexartLabs/Lexart-Async-Test/node_modules/@vercel/postgres/src/create-pool.ts","/home/jose/Documentos/testesTecnicos/lexartLabs/Lexart-Async-Test/node_modules/@vercel/postgres/src/error.ts","/home/jose/Documentos/testesTecnicos/lexartLabs/Lexart-Async-Test/node_modules/@vercel/postgres/src/postgres-connection-string.ts","/home/jose/Documentos/testesTecnicos/lexartLabs/Lexart-Async-Test/node_modules/@vercel/postgres/src/sql-template.ts","/home/jose/Documentos/testesTecnicos/lexartLabs/Lexart-Async-Test/node_modules/@vercel/postgres/src/create-client.ts","/home/jose/Documentos/testesTecnicos/lexartLabs/Lexart-Async-Test/node_modules/@vercel/postgres/src/index.ts"],"sourcesContent":["import type {\n  PoolClient,\n  QueryResult,\n  QueryResultRow,\n} from '@neondatabase/serverless';\nimport { Pool, neon } from '@neondatabase/serverless';\nimport type { VercelPoolClient, VercelPostgresPoolConfig } from './types';\nimport {\n  isLocalhostConnectionString,\n  isPooledConnectionString,\n  postgresConnectionString,\n} from './postgres-connection-string';\nimport { VercelPostgresError } from './error';\nimport type { Primitive } from './sql-template';\nimport { sqlTemplate } from './sql-template';\nimport { VercelClient } from './create-client';\n\nexport class VercelPool extends Pool {\n  Client = VercelClient;\n  private connectionString: string;\n\n  constructor(config: VercelPostgresPoolConfig) {\n    super(config);\n    this.connectionString = config.connectionString ?? '';\n  }\n\n  /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createPool();\n   * const userId = 123;\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * ```\n   * @returns A promise that resolves to the query result.\n   */\n  async sql<O extends QueryResultRow>(\n    strings: TemplateStringsArray,\n    ...values: Primitive[]\n  ): Promise<QueryResult<O>> {\n    const [query, params] = sqlTemplate(strings, ...values);\n\n    const sql = neon(this.connectionString, {\n      fullResults: true,\n    });\n    return sql(query, params) as unknown as Promise<QueryResult<O>>;\n  }\n\n  connect(): Promise<VercelPoolClient>;\n  connect(\n    callback: (\n      err: Error,\n      client: VercelPoolClient,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any -- [@vercel/style-guide@5 migration]\n      done: (release?: any) => void,\n    ) => void,\n  ): void;\n  connect(\n    callback?: (\n      err: Error,\n      client: VercelPoolClient,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any -- [@vercel/style-guide@5 migration]\n      done: (release?: any) => void,\n    ) => void,\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type -- [@vercel/style-guide@5 migration]\n  ): void | Promise<VercelPoolClient> {\n    // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression -- [@vercel/style-guide@5 migration]\n    return super.connect(\n      callback as (\n        err: Error,\n        client: PoolClient,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any -- [@vercel/style-guide@5 migration]\n        done: (release?: any) => void,\n      ) => void,\n    );\n  }\n}\n\nexport function createPool(config?: VercelPostgresPoolConfig): VercelPool {\n  const connectionString =\n    config?.connectionString ?? postgresConnectionString('pool');\n  if (!connectionString)\n    throw new VercelPostgresError(\n      'missing_connection_string',\n      \"You did not supply a 'connectionString' and no 'POSTGRES_URL' env var was found.\",\n    );\n\n  if (\n    !isLocalhostConnectionString(connectionString) &&\n    !isPooledConnectionString(connectionString)\n  )\n    throw new VercelPostgresError(\n      'invalid_connection_string',\n      'This connection string is meant to be used with a direct connection. Make sure to use a pooled connection string or try `createClient()` instead.',\n    );\n\n  let maxUses = config?.maxUses;\n  let max = config?.max;\n  if (typeof EdgeRuntime !== 'undefined') {\n    if (maxUses && maxUses !== 1) {\n      // eslint-disable-next-line no-console -- [@vercel/style-guide@5 migration]\n      console.warn(\n        '@vercel/postgres: Overriding `maxUses` to 1 because the EdgeRuntime does not support client reuse.',\n      );\n    }\n    if (max && max !== 10_000) {\n      // eslint-disable-next-line no-console -- [@vercel/style-guide@5 migration]\n      console.warn(\n        '@vercel/postgres: Overriding `max` to 10,000 because the EdgeRuntime does not support client reuse.',\n      );\n    }\n    // Client reuse is not supported in the EdgeRuntime because it does not support IO across requests.\n    maxUses = 1;\n    // Since we do not allow client reuse, we need a higher max number of clients to avoid running out of\n    // connections.\n    // Usecase: a website that needs more than 10 concurrent connections\n    // https://node-postgres.com/apis/pool#new-pool\n    max = 10_000;\n  }\n\n  const pool = new VercelPool({\n    ...config,\n    connectionString,\n    maxUses,\n    max,\n  });\n  return pool;\n}\n","type VercelPostgresErrorCode =\n  | 'invalid_connection_string'\n  | 'missing_connection_string'\n  | 'invalid_connection_type'\n  | 'incorrect_tagged_template_call';\n\nexport class VercelPostgresError extends Error {\n  public constructor(\n    public code: VercelPostgresErrorCode,\n    message: string,\n  ) {\n    super(`VercelPostgresError - '${code}': ${message}`);\n    this.name = 'VercelPostgresError';\n  }\n}\n","import { VercelPostgresError } from './error';\n\nexport type ConnectionStringType = 'pool' | 'direct';\n\nexport function postgresConnectionString(\n  type: ConnectionStringType = 'pool',\n): string | undefined {\n  let connectionString: string | undefined;\n\n  switch (type) {\n    case 'pool': {\n      connectionString = process.env.POSTGRES_URL;\n      break;\n    }\n    case 'direct': {\n      connectionString = process.env.POSTGRES_URL_NON_POOLING;\n      break;\n    }\n    default: {\n      const _exhaustiveCheck: never = type;\n      const str = _exhaustiveCheck as string;\n      throw new VercelPostgresError(\n        'invalid_connection_type',\n        `Unhandled type: ${str}`,\n      );\n    }\n  }\n\n  if (connectionString === 'undefined') connectionString = undefined;\n  return connectionString;\n}\n\nexport function isPooledConnectionString(connectionString: string): boolean {\n  return connectionString.includes('-pooler.');\n}\n\nexport function isDirectConnectionString(connectionString: string): boolean {\n  return !isPooledConnectionString(connectionString);\n}\n\nexport function isLocalhostConnectionString(connectionString: string): boolean {\n  try {\n    // This seems silly, but we can use all of the hard work put into URL parsing\n    // if we just convert `postgresql://` to `https://` and then parse it as a URL.\n    const withHttpsProtocol = connectionString.replace(\n      /^postgresql:\\/\\//,\n      'https://',\n    );\n    return new URL(withHttpsProtocol).hostname === 'localhost';\n  } catch (err) {\n    if (err instanceof TypeError) {\n      return false;\n    }\n    // ok typescript\n    if (\n      typeof err === 'object' &&\n      err !== null &&\n      'message' in err &&\n      typeof err.message === 'string' &&\n      err.message === 'Invalid URL'\n    ) {\n      return false;\n    }\n    throw err;\n  }\n}\n","import { VercelPostgresError } from './error';\n\nexport type Primitive = string | number | boolean | undefined | null;\n\nexport function sqlTemplate(\n  strings: TemplateStringsArray,\n  ...values: Primitive[]\n): [string, Primitive[]] {\n  if (!isTemplateStringsArray(strings) || !Array.isArray(values)) {\n    throw new VercelPostgresError(\n      'incorrect_tagged_template_call',\n      \"It looks like you tried to call `sql` as a function. Make sure to use it as a tagged template.\\n\\tExample: sql`SELECT * FROM users`, not sql('SELECT * FROM users')\",\n    );\n  }\n\n  let result = strings[0] ?? '';\n\n  for (let i = 1; i < strings.length; i++) {\n    result += `$${i}${strings[i] ?? ''}`;\n  }\n\n  return [result, values];\n}\n\nfunction isTemplateStringsArray(\n  strings: unknown,\n): strings is TemplateStringsArray {\n  return (\n    Array.isArray(strings) && 'raw' in strings && Array.isArray(strings.raw)\n  );\n}\n","import type { QueryResult, QueryResultRow } from '@neondatabase/serverless';\nimport { Client } from '@neondatabase/serverless';\nimport type { VercelPostgresClientConfig } from './types';\nimport {\n  isDirectConnectionString,\n  isLocalhostConnectionString,\n  postgresConnectionString,\n} from './postgres-connection-string';\nimport { VercelPostgresError } from './error';\nimport type { Primitive } from './sql-template';\nimport { sqlTemplate } from './sql-template';\n\nexport class VercelClient extends Client {\n  /**\n   * A template literal tag providing safe, easy to use SQL parameterization.\n   * Parameters are substituted using the underlying Postgres database, and so must follow\n   * the rules of Postgres parameterization.\n   * @example\n   * ```ts\n   * const pool = createClient();\n   * const userId = 123;\n   * await client.connect();\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\n   * await client.end();\n   * ```\n   * @returns A promise that resolves to the query result.\n   */\n  async sql<O extends QueryResultRow>(\n    strings: TemplateStringsArray,\n    ...values: Primitive[]\n  ): Promise<QueryResult<O>> {\n    const [query, params] = sqlTemplate(strings, ...values);\n    return this.query(query, params);\n  }\n}\n\nexport function createClient(\n  config?: VercelPostgresClientConfig,\n): VercelClient {\n  const connectionString =\n    config?.connectionString ?? postgresConnectionString('direct');\n  if (!connectionString)\n    throw new VercelPostgresError(\n      'missing_connection_string',\n      \"You did not supply a 'connectionString' and no 'POSTGRES_URL_NON_POOLING' env var was found.\",\n    );\n  if (\n    !isLocalhostConnectionString(connectionString) &&\n    !isDirectConnectionString(connectionString)\n  )\n    throw new VercelPostgresError(\n      'invalid_connection_string',\n      'This connection string is meant to be used with a pooled connection. Try `createPool()` instead.',\n    );\n  return new VercelClient({\n    ...config,\n    connectionString,\n  });\n}\n","import type { QueryResult, QueryResultRow } from '@neondatabase/serverless';\nimport { type VercelPool, createPool } from './create-pool';\nimport type { Primitive } from './sql-template';\n\nexport * from './create-client';\nexport * from './create-pool';\nexport * from './types';\nexport { postgresConnectionString } from './postgres-connection-string';\n\nlet pool: VercelPool | undefined;\n\n// for future peons who aren't briliant like Malte, this means\n// \"make an object that will pretend to be a pool but not initialize itself\n// until someone tries to access a property on it\"\n// this also makes it callable, so you can call `sql` as a function\nexport const sql = new Proxy(\n  // eslint-disable-next-line @typescript-eslint/no-empty-function -- [@vercel/style-guide@5 migration]\n  () => {},\n  {\n    get(_, prop) {\n      if (!pool) {\n        pool = createPool();\n      }\n\n      // keep an eye on this -- it'll fail on certain cases, like private property access, which can\n      // require weird things like binding or calling with an explicit `this` arg.\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- [@vercel/style-guide@5 migration]\n      const val = Reflect.get(pool, prop);\n      if (typeof val === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call -- [@vercel/style-guide@5 migration]\n        return val.bind(pool);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return -- [@vercel/style-guide@5 migration]\n      return val;\n    },\n    apply(_, __, argumentsList) {\n      if (!pool) {\n        pool = createPool();\n      }\n\n      // @ts-expect-error - we're breaking all kinds of rules\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- [@vercel/style-guide@5 migration]\n      return pool.sql(...argumentsList);\n    },\n  },\n) as unknown as VercelPool &\n  (<O extends QueryResultRow>(\n    strings: TemplateStringsArray,\n    ...values: Primitive[]\n  ) => Promise<QueryResult<O>>);\n\nexport const db = sql;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}