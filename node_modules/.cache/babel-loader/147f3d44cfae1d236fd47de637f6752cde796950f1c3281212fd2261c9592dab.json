{"ast":null,"code":"const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\nconst MIN = 6;\nexport const validateFields = (name, email, password) => {\n  const MIN_NAME = 12;\n  if (name.length < MIN_NAME) {\n    return true;\n  } else if (!emailRegex.test(email)) {\n    return true;\n  } else if (password.length < MIN) {\n    return true;\n  } else {\n    return false;\n  }\n  ;\n};\nexport const validateLogin = (email, password) => {\n  if (!emailRegex.test(email)) {\n    return true;\n  } else if (password.length < MIN) {\n    return true;\n  } else {\n    return false;\n  }\n  ;\n};","map":{"version":3,"names":["emailRegex","MIN","validateFields","name","email","password","MIN_NAME","length","test","validateLogin"],"sources":["/home/jose/Documentos/testesTecnicos/lexartLabs/Lexart-Async-Test/src/services/validateLogin.js"],"sourcesContent":["const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\nconst MIN = 6;\n\nexport const validateFields = (name, email, password) => {\n  const MIN_NAME = 12;\n\n  if (name.length < MIN_NAME) {\n    return true\n  } else if (!emailRegex.test(email)) {\n    return true\n  } else if (password.length < MIN) {\n    return true\n  } else {  \n    return false\n  };\n};\n\nexport const validateLogin = (email, password) => {\n  if (!emailRegex.test(email)) {\n    return true\n  }else if (password.length < MIN){\n    return true\n  } else {\n    return false\n  };\n};\n\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG,6CAA6C;AAChE,MAAMC,GAAG,GAAG,CAAC;AAEb,OAAO,MAAMC,cAAc,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EACvD,MAAMC,QAAQ,GAAG,EAAE;EAEnB,IAAIH,IAAI,CAACI,MAAM,GAAGD,QAAQ,EAAE;IAC1B,OAAO,IAAI;EACb,CAAC,MAAM,IAAI,CAACN,UAAU,CAACQ,IAAI,CAACJ,KAAK,CAAC,EAAE;IAClC,OAAO,IAAI;EACb,CAAC,MAAM,IAAIC,QAAQ,CAACE,MAAM,GAAGN,GAAG,EAAE;IAChC,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;EAAC;AACH,CAAC;AAED,OAAO,MAAMQ,aAAa,GAAGA,CAACL,KAAK,EAAEC,QAAQ,KAAK;EAChD,IAAI,CAACL,UAAU,CAACQ,IAAI,CAACJ,KAAK,CAAC,EAAE;IAC3B,OAAO,IAAI;EACb,CAAC,MAAK,IAAIC,QAAQ,CAACE,MAAM,GAAGN,GAAG,EAAC;IAC9B,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;EAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}